package chess.pieces;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.util.ArrayList;

import chess.components.GameBoard;
import chess.components.GameSquare;


public class Queen extends Chesspiece {
	
	public Queen(Color color) {
		super(color, Type.QUEEN);
		
		if(color == Color.WHITE)
			point = new Point(225, 0);
		else
			point = new Point(225, 525);
	}
	
	public Queen(Color color, boolean test, Point p){
		super(color, Type.QUEEN, test);
		
		point = p;
		
		System.out.println("Test piece spawned!");
	}
	

	/**
	 * See super class for description!
	 */
	@Override
	public Point[] path() {
		ArrayList<Point> validMoves = new ArrayList<Point>();
		boolean[] pathBlocked = new boolean[8];
		GameSquare gs = null;
		Point p = null;
		
		for(int i = 0; i < 8; i++){
			for(int j = 1; j < 9; j++){
				
				switch(i){
				case 0:
					p = new Point(point.x + (SQUARE_SIZE * j), point.y);
					break;
				case 1:
					p = new Point(point.x + (SQUARE_SIZE * j), point.y - (SQUARE_SIZE * j));
					break;
				case 2:
					p = new Point(point.x, point.y - (SQUARE_SIZE * j));
					break;
				case 3:
					p = new Point(point.x - (SQUARE_SIZE * j), point.y - (SQUARE_SIZE * j));
					break;
				case 4:
					p = new Point(point.x - (SQUARE_SIZE * j), point.y);
					break;
				case 5:
					p = new Point(point.x - (SQUARE_SIZE * j), point.y + (SQUARE_SIZE * j));
					break;
				case 6:
					p = new Point(point.x, point.y + (SQUARE_SIZE * j));
					break;
				case 7:
					p = new Point(point.x + (SQUARE_SIZE * j), point.y + (SQUARE_SIZE * j));
					break;
				default:
					System.out.println("FATAL ERROR, SHOULD NOT BE HERE!");
				}
				
				gs = GameBoard.getGameSquare(p);
				if(gs != null){
					if(gs.isOccupied() && !pathBlocked[i]){
						if(gs.getGuest().getColor() != color){
							validMoves.add(p);
							pathBlocked[i] = true;
						}
						else if(gs.getGuest().getColor() == color){
							pathBlocked[i] = true;
						}
					}
					else if(!pathBlocked[i]){
						validMoves.add(p);
					}
					else {
						pathBlocked[i] = true;
					}
				}
			}
		}		
		return arrayListToNativeArray(validMoves);
	}

	/**
	 * See super class for description!
	 */
	@Override
	public void draw(Graphics g) {
		int x1Points[] = {14, 61, 55, 50, 46, 46, 47, 50, 56, 50, 46, 45, 49, 49, 47, 50, 52, 48, 48, 44, 40, 39, 35, 31, 31, 27, 29, 32, 29, 29, 31, 32, 30, 21, 27, 31, 32, 31, 27, 22, 14};
		int y1Points[] = {72, 72, 67, 64, 57, 50, 45, 41, 38, 37, 34, 29, 24, 20, 17, 15, 10, 12,  9, 11,  7,  7, 11,  9, 12, 10, 15, 17, 20, 24, 29, 34, 37, 38, 41, 45, 50, 57, 64, 67, 72};
		
		Graphics2D g2 = (Graphics2D) g;
		
		g2.setRenderingHint
		  (RenderingHints.KEY_ANTIALIASING,
				   RenderingHints.VALUE_ANTIALIAS_ON);
		
		g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		
		// Draw shape
		g2.setStroke(new BasicStroke(1.6F, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND));
		g2.setColor(color);
		g2.fillPolygon(x1Points, y1Points, x1Points.length);
		
		
		// Draw outline
		g2.setColor(drawingProperties.getOutlineColor());
		g2.drawPolygon(x1Points, y1Points, x1Points.length);
		
		// Draw inline
		g2.setColor(drawingProperties.getInlineColor());
		g2.drawLine(32, 17, 47, 17);
		g2.drawLine(21, 38, 56, 38);
		g2.drawLine(24, 41, 53, 41);
		g2.drawLine(17, 70, 59, 70);
	}
}
